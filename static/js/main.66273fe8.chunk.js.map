{"version":3,"sources":["TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","TodoListTitle.tsx","AddNewItemForm.tsx","api.ts","reducer.ts","TodoList.tsx","App.tsx","store.ts","index.tsx"],"names":["TodoListTask","state","editMode","title","props","task","onIsDoneChanged","e","status","currentTarget","checked","changeStatus","id","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","completed","priotityTitle","priority","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","api","get","then","res","data","post","todolistId","delete","put","newTaskTitle","taskId","ADD_TASK_SUCCESS","SET_TASKS_SUCCESS","initialState","todolists","todolistReducer","action","tl","newTodolist","filter","t","newTask","obj","TodoList","restoreState","getTasks","addTask","newFilterValue","changeTask","changedTask","find","deleteTodolist","deleteTodo","this","connect","todoId","dispatch","allTasks","items","item","addTaskSuccess","updateTaskSuccess","deleteTaskSuccess","updateTodolistTitleSuccess","App","getTodolists","addTodoList","addTodolist","todolist","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.66273fe8.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {TaskType} from \"./types/entityies\";\n\ntype StateType = {\n    editMode: boolean\n    title: string\n};\n\ntype TDTaskType = {\n    task: TaskType,\n    changeStatus: (taskId: string, status: number)=> void,\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void,\n}\n\nclass TodoListTask extends React.Component<TDTaskType, StateType> {\n\n    state: StateType = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    onIsDoneChanged = (e:ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    };\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n    render = () => {\n        let containerCssClass = this.props.task.completed ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0: priotityTitle = \"Low\"; break;\n            case 1: priotityTitle = \"Middle\"; break;\n            case 2: priotityTitle = \"High\"; break;\n            case 3: priotityTitle = \"Urgently\"; break;\n            case 4: priotityTitle = \"Later\"; break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, priority: {priotityTitle} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport {TaskType} from \"./types/entityies\";\n\ntype TDTasksType = {\n    changeStatus: (taskId: string, status: number) => void,\n    deleteTask: (taskId: string) => void,\n    changeTitle: (title: string, todoId: string) => void,\n    tasks: TaskType[],\n}\n\nclass TodoListTasks extends React.Component<TDTasksType> {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(task => {\n            return <TodoListTask task={task}\n                                 key={task.id}\n                                 changeStatus={this.props.changeStatus}\n                                 changeTitle={this.props.changeTitle}\n                                 deleteTask={this.props.deleteTask}\n            />\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\ntype TDFooterType = {\n    changeFilter: (taskId: string) => void,\n    filterValue: string\n}\ntype StateType = {\n    isHidden: boolean\n}\n\nclass TodoListFooter extends React.Component<TDFooterType, StateType> {\n\n    state: StateType = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter(\"All\");\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter(\"Completed\");\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter(\"Active\");\n    };\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n                }\n                {!this.state.isHidden && <span onClick={this.onShowFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onHideFiltersClick}>show</span>}\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {TodoType} from \"./types/entityies\";\n\ntype TitleType = {\n    updateTitle: (title: string)=> void,\n    title: string,\n\n}\ntype TDTitleType = TitleType\n\nclass TodoListTitle extends React.Component <TDTitleType> {\n\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTitle(this.state.title);\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    render = () => {\n        return (\n            <>\n                {\n                    this.state.editMode\n                        ? <input value={this.state.title}\n                                 autoFocus={true}\n                                 onBlur={this.deactivateEditMode}\n                                 onChange={this.onTitleChanged}\n                        />\n                        : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}</h3>\n                }\n            </>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\n\ntype AddNewItemType = {\n    addItem: (newText: string) => void,\n}\ntype StateType = {\n    error: boolean\n    title: string\n};\nclass AddNewItemForm extends React.Component<AddNewItemType, StateType> {\n\n    state: StateType = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e:any) => { ////not typing\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput}\n                       type=\"text\"\n                       placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\nimport {TaskType, TodoType} from \"./types/entityies\";\r\n\r\ntype TasksResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string,\r\n}\r\n\r\ntype CommonResponseType<T> = {\r\n    data: T\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\n\r\ntype TodoResponseType = {\r\n    data: { item: TodoType }\r\n    resultCode: number\r\n    messages: string[]\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"3eb442be-c6ec-48c8-96fc-69807a29300c\"}// меняем API-KEY на собственный\r\n});\r\n\r\nexport const api = {\r\n    getTodolists() {\r\n        return instance.get<TodoType[]>('').then(res=> res.data)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<TodoResponseType>(\"\", {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<TodoResponseType>(`/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(title: string, todolistId: string) {\r\n        return instance.put<CommonResponseType<{}>>(`/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksResponseType>(`/${todolistId}/tasks`)\r\n    },\r\n    createTask(newTaskTitle: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{item: TaskType}>>(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    updateTask(taskId: string, todolistId: string, task: any) {\r\n        return instance.put<CommonResponseType<{item: TaskType}>>(`/${todolistId}/tasks/${taskId}`, task);\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<TodoResponseType>(`/${todolistId}/tasks/${taskId}`)\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import {api} from \"./api\";\r\nimport {TaskType, TodoType} from \"./types/entityies\";\r\n\r\nconst ADD_TODOLIST_SUCCESS = \"TodoList/Reducer/ADD_TODOLIST_SUCCESS\";\r\nconst DELETE_TODOLIST_SUCCESS = \"TodoList/Reducer/DELETE_TODOLIST_SUCCESS\";\r\nconst DELETE_TASK_SUCCESS = \"TodoList/Reducer/DELETE_TASK_SUCCESS\";\r\nconst UPDATE_TODOLIST_TITLE_SUCCESS = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE_SUCCESS\";\r\nconst ADD_TASK_SUCCESS = \"TodoList/Reducer/ADD_TASK_SUCCESS\";\r\nconst SET_TASKS_SUCCESS = \"TodoList/Reducer/SET_TASKS_SUCCESS\";\r\nconst UPDATE_TASK_SUCCESS = \"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\nconst SET_TODOLISTS_SUCCESS = \"TodoList/Reducer/SET_TODOLISTS_SUCCESS\";\r\n\r\ntype InitialStateType = {\r\n    // todolists: TodoType[]\r\n    todolists: Array<TodoType>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: []\r\n};\r\n\r\nconst todolistReducer = (state: InitialStateType = initialState, action: TodoActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_TASKS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case ADD_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [action.newTodolist, ...state.todolists]\r\n            };\r\n        case DELETE_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        case UPDATE_TODOLIST_TITLE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            };\r\n        case DELETE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default todolistReducer;\r\n\r\n// Action creators typification\r\n\r\nconst updateTaskSuccess = (taskId: string, obj: any, todolistId: string): UpdateTaskSuccessActionType => ({\r\n    type: UPDATE_TASK_SUCCESS,\r\n    taskId,\r\n    obj,\r\n    todolistId\r\n});\r\nconst deleteTodoSuccess = (todolistId: string): DeleteTodoSuccessActionType => ({\r\n    type: DELETE_TODOLIST_SUCCESS,\r\n    todolistId: todolistId\r\n});\r\nconst deleteTaskSuccess = (todolistId: string, taskId: string): DeleteTaskSuccessType => ({\r\n    type: DELETE_TASK_SUCCESS,\r\n    todolistId,\r\n    taskId\r\n});\r\nconst updateTodolistTitleSuccess = (todolistId: string, title: string): UpdateTodolistTitleSuccessType => ({\r\n    type: UPDATE_TODOLIST_TITLE_SUCCESS,\r\n    todolistId,\r\n    title\r\n});\r\nconst addTaskSuccess = (newTask: TaskType, todolistId: string): AddTaskSuccessType => ({\r\n    type: ADD_TASK_SUCCESS,\r\n    newTask,\r\n    todolistId\r\n});\r\nconst getTasksSuccess = (tasks: TaskType[], todolistId: string): GetTasksSuccessType => ({\r\n    type: SET_TASKS_SUCCESS,\r\n    tasks,\r\n    todolistId\r\n});\r\nconst addTodolistSuccess = (newTodolist: TodoType): AddTodolistSuccessType => ({\r\n    type: ADD_TODOLIST_SUCCESS,\r\n    newTodolist: newTodolist\r\n});\r\nconst getTodolistsSuccess = (todolists: TodoType[]): GetTodolistsSuccessType => ({\r\n    type: SET_TODOLISTS_SUCCESS,\r\n    todolists: todolists\r\n});\r\n\r\n// Action creators Type\r\ntype UpdateTaskSuccessActionType = {\r\n    type: typeof UPDATE_TASK_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    taskId: string\r\n    obj: any\r\n    todolistId: string\r\n}\r\ntype DeleteTodoSuccessActionType = {\r\n    type: typeof DELETE_TODOLIST_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    todolistId: string\r\n}\r\ntype DeleteTaskSuccessType = {\r\n    type: typeof DELETE_TASK_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype UpdateTodolistTitleSuccessType = {\r\n    type: typeof UPDATE_TODOLIST_TITLE_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype AddTaskSuccessType = {\r\n    type: typeof ADD_TASK_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    newTask: TaskType\r\n    todolistId: string\r\n}\r\ntype GetTasksSuccessType = {\r\n    type: typeof SET_TASKS_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    tasks: TaskType[], todolistId: string\r\n}\r\ntype AddTodolistSuccessType = {\r\n    type: typeof ADD_TODOLIST_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    newTodolist: TodoType\r\n}\r\ntype GetTodolistsSuccessType = {\r\n    type: typeof SET_TODOLISTS_SUCCESS //\"TodoList/Reducer/UPDATE_TASK_SUCCESS\";\r\n    todolists: TodoType[]\r\n}\r\n// Action typification\r\ntype TodoActionType =\r\n    UpdateTaskSuccessActionType\r\n    | DeleteTodoSuccessActionType\r\n    | DeleteTaskSuccessType\r\n    | UpdateTodolistTitleSuccessType\r\n    | AddTaskSuccessType\r\n    | GetTasksSuccessType\r\n    | AddTodolistSuccessType\r\n    | GetTodolistsSuccessType\r\n\r\n// Thunk creator typification\r\n\r\nexport const getTodolists = () => (dispatch: any) => {\r\n    api.getTodolists()\r\n        .then(data => {\r\n            dispatch(getTodolistsSuccess(data));\r\n        })\r\n};\r\n\r\nexport const addTodolist = (title: string) => (dispatch: any) => {\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistSuccess(todolist))\r\n        });\r\n};\r\n\r\nexport const getTasks = (todoId: string) => (dispatch: any) => {\r\n    api.getTasks(todoId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(getTasksSuccess(allTasks, todoId))\r\n        });\r\n};\r\n\r\nexport const addTask = (title: string, todoId: string) => (dispatch: any) => {\r\n    api.createTask(title, todoId)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskSuccess(newTask, todoId))\r\n        });\r\n};\r\n\r\nexport const changeTask = (taskId: string, todoId: string, task: TaskType, obj: any) => (dispatch: any) => {\r\n    api.updateTask(taskId, todoId, task)\r\n        .then(res => {\r\n            dispatch(updateTaskSuccess(taskId, obj, todoId))\r\n        })\r\n};\r\n\r\nexport const deleteTodo = (todoId: string) => (dispatch: any) => {\r\n    api.deleteTodolist(todoId)\r\n        .then(res => {\r\n            dispatch(deleteTodoSuccess(todoId))\r\n        });\r\n};\r\n\r\nexport const deleteTask = (taskId: string, todoId: string) => (dispatch: any) => {\r\n    api.deleteTask(taskId, todoId)\r\n        .then(res => {\r\n            dispatch(deleteTaskSuccess(todoId, taskId))\r\n        });\r\n};\r\n\r\nexport const updateTitle = (title: string, todoId: string) => (dispatch: any) => {\r\n    api.updateTodolistTitle(title, todoId)\r\n        .then(res => {\r\n            dispatch(updateTodolistTitleSuccess(todoId, title))\r\n        });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTask,\n    getTasks,\n    changeTask,\n    deleteTodo, deleteTask, updateTitle\n} from \"./reducer\";\nimport {TaskType, TodoType} from \"./types/entityies\";\n\ntype StateType = {\n    // filterValue: \"All\" | \"Completed\" | \"Active\"\n    filterValue: string\n}\n\ntype MDTPType = {\n    getTasks: (todoId: string) => void, // input parameters (left) &&  output parameters (right)\n    addTask: (newText: string, todoId: string) => void,\n    changeTask: (taskId: string, todoId: string, task: TaskType, obj: any) => void,\n    deleteTodo:(todoId: string) => void,\n    deleteTask:(todoId: string, taskId: string) => void,\n    updateTitle:(title: string, todoId: string) => void,\n}\n\ntype TodolistType = TodoType & MDTPType;\n\n// type X = number;\n// type Y<T> = T extends number ? boolean : string;\n// const y: Y<undefined> = 1\n\nclass TodoList extends React.Component <TodolistType, StateType> {\n\n    state: StateType = {\n        filterValue: \"All\"\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.getTasks(this.props.id)\n    };\n\n    addTask = (newText: string) => {\n        this.props.addTask(newText, this.props.id)\n    };\n\n    changeFilter = (newFilterValue:string) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    };\n\n    changeTask = (taskId: string, obj: any) => {\n        let changedTask = this.props.tasks.find(task => {\n            return task.id === taskId\n        });\n        let task = {...changedTask, ...obj};\n\n        this.props.changeTask(taskId, this.props.id, task, obj);\n    };\n\n    changeStatus = (taskId:string, status:number) => {\n        this.changeTask(taskId, {status});\n    };\n\n    changeTitle = (taskId:string, title:string) => {\n        this.changeTask(taskId, {title});\n    };\n\n    deleteTodolist = () => {\n        this.props.deleteTodo(this.props.id)\n    };\n\n    deleteTask = (taskId: string) => {\n        this.props.deleteTask(taskId, this.props.id);\n    };\n\n    updateTitle = (title:string) => {\n        this.props.updateTitle(title, this.props.id)\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n            <div className = \"todoList-header\">\n            <div className = \"wrapper\" >\n            <TodoListTitle title = {this.props.title} updateTitle = {this.updateTitle} />\n        < button onClick = {this.deleteTodolist} > X </button>\n            </div>\n            <AddNewItemForm addItem = {this.addTask}/>\n        </div>\n\n        <TodoListTasks\n        changeStatus = {this.changeStatus}\n        changeTitle = {this.changeTitle}\n        deleteTask = {this.deleteTask}\n        tasks = {\n            tasks.filter(t => {\n                if (this.state.filterValue === \"All\") {\n                    return true;\n                }\n                if (this.state.filterValue === \"Active\") {\n                    return t.status === 0;\n                }\n                if (this.state.filterValue === \"Completed\") {\n                    return t.status === 2;\n                }\n            })\n        }\n        />\n        < TodoListFooter changeFilter = {this.changeFilter} filterValue = {this.state.filterValue} />\n        </div>\n    );\n    }\n}\n\n\nexport default connect<{}, MDTPType, {}, StateType>(null, {getTasks, addTask, changeTask, deleteTodo, deleteTask, updateTitle})(TodoList);\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolist, getTodolists} from \"./reducer\";\nimport {AppStateType} from \"./store\";\nimport {TodoType} from \"./types/entityies\";\n\ntype MapStatePropsType = {\n    todolists: TodoType[]\n}\ntype MapDispatchPropsType = {\n    getTodolists: ()=> void\n    addTodolist: (title: string)=> void\n}\n\ntype PropsType = MapDispatchPropsType & MapStatePropsType\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.getTodolists()\n    };\n\n    addTodoList = (title:string) => {\n        this.props.addTodolist(title)\n    };\n\n    render = () => {\n        const todolists = this.props.todolists.map((tl) => {\n            return <TodoList key={tl.id}\n                             id={tl.id}\n                             title={tl.title}\n                             tasks={tl.tasks} />\n        });\n\n        return (\n            <div>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state:AppStateType): MapStatePropsType => {\n    return {\n        todolists: state.todolist.todolists\n    }\n};\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {getTodolists, addTodolist})(App);\n//<MapStatePropsType, MapDispatchPropsType, null, null>","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport todolistReducer from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: todolistReducer\r\n});\r\n\r\nexport type RootReducerType = typeof rootReducer //(global state: AppStateType) => globalState: AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}